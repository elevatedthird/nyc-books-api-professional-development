<?php

/**
 * Use this file to override Drupal's default HTML output
 *
 * 1. Preprocess hooks
 * 2. Theme suggestions
 * 3. Utility functions
 */

use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\block\Entity\Block;
use Drupal\views\Views;

//*********************************************
// 1. Preprocess hooks
//*********************************************

/**
 * Implements template_preprocess_node().
 */
function starterkit_preprocess_node(&$variables) {
  // Set our own node type preprocess, drupal creates them by default, but seems to only run hook_preprocess_node__event
  // on event full pages, not event teasers as well
  if (!empty($variables['node']) && is_object($variables['node']) && method_exists($variables['node'], 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $variables['node']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}


/**
 * Implements template_preprocess_page().
 */
function starterkit_preprocess_page(&$variables) {
}

/**
 * Implements template_preprocess_field().
 */
function starterkit_preprocess_field(&$variables) {

}

/**
 * Implements template_preprocess_node_article().
 */
function starterkit_preprocess_node_article(&$variables) {
}

/**
 * Paragraphs preprocess.
 */
function starterkit_preprocess_paragraph(&$variables) {
  // Set our own paragraphs type preprocess, drupal creates them by default, but they seem
  // to only run hook_preprocess_paragraph__simple_content on default view mode,
  // not additional view modes as well
  if (!empty($variables['paragraph']) && is_object($variables['paragraph']) && method_exists($variables['paragraph'], 'getType')) {
    //ensure that the node variable exists and is an object
    $function = __FUNCTION__ . '_' . $variables['paragraph']->getType();
    if (function_exists($function)) {
      $function($variables);
    }
  }
}

/** Simple */
function starterkit_preprocess_paragraph_simple_content(&$variables) {
  // Example hook for paragraph type
}

/** Link */
function starterkit_preprocess_paragraph_link_file(&$variables) {
  /* @var $paragraph Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['paragraph'];

  // If alt link text has content, set to description to that value and create a new cache tag
  if (!$paragraph->field_alt_link_text->isEmpty()) {
    $file = $paragraph->field_file->entity->field_file->entity;

    if ($file) {
      $variables['alternate_file'] = [
        '#theme' => 'file_link',
        '#file' => $file,
        '#description' => $paragraph->field_alt_link_text->value
      ];
    }
  }
}

/**
 * Paragraphs preprocess media image.
 *
 * @param array $variables
 *   Default preprocess variables.
 */
function starterkit_preprocess_paragraph_media_image(array &$variables) {
  /* @var $paragraph Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['paragraph'];

  if (!empty($paragraph->field_image->entity)) {
    $uri = $paragraph->field_image->entity->field_media_image->entity->getFileUri();
    $alt = $paragraph->field_image->entity->field_media_image->first()->get('alt')->getString();
    $responsive_image_style = '';

    // Do contextual adjustments to responsive image (image style or background
    // Identify the implementing bundle and use any additional conditions as well
    $parent = $paragraph->getParentEntity();
    if ($parent->getEntityTypeId() === 'paragraph') {
      switch ($parent->getType()) {
//      TODO: examples to demonstrate implementing responsive image style and background image overrides on media_image, remove if not using
//        case 'compound_media_bar':
//          $responsive_image_style = 'full_width';
//          break;
      }
    }

    // Only set custom image style for items that have set the responsive image style
    if ($responsive_image_style) {
      $variables['custom_image_style'] = [
        '#theme' => 'responsive_image',
        '#responsive_image_style_id' => $responsive_image_style,
        '#uri' => $uri,
        '#attributes' => [
          'alt' => $alt,
        ],
      ];
    }
  }
}

/** Compound */
// TODO: Delete this preprocess and the corresponding template/styles if you are deleting all of the starter paragraphs
function starterkit_preprocess_paragraph_compound_media_bar(&$variables) {
  /* @var $paragraph Drupal\paragraphs\Entity\Paragraph */
  $paragraph = $variables['paragraph'];

  // Get settings
  $variables['media_order'] = $paragraph->field_media_order->value;
  $variables['media_position'] = $paragraph->field_media_position->value;
}


//*********************************************
// 2. Theme suggestions
//*********************************************

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function starterkit_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $field_name = !empty($variables['element']['#field_name']) ? $variables['element']['#field_name'] : '';
  $type = !empty($variables['element']['#entity_type']) ? $variables['element']['#entity_type'] : '';
  $bundle = !empty($variables['element']['#bundle']) ? $variables['element']['#bundle'] : '';
  $is_paragraph = ($type == 'paragraph');

  // Apply theme suggestions based on field name.
  switch($field_name) {
    case 'field_p_content':
    case 'field_p_header':
      // Remove all field markup so only the field value markup is output.
      array_unshift($suggestions, 'field__no_wrapper');
      break;
    case 'field_p_column':
      // Remove field item wrappers.
      array_unshift($suggestions, 'field__reset');
      break;
  }

  // Apply theme suggestions for "field_heading" based on paragraph bundle.
  if ($field_name == 'field_heading' && $is_paragraph) {
    switch($bundle) {
      case 'banner_standard':
      case 'single_heading':
        array_unshift($suggestions, 'field__heading_3');
        break;
    }
  }

  switch ($type) {
    case 'contact_message':
      $suggestions[] = 'field__' . $type;
      $suggestions[] = 'field__' . $type . '__' . $variables['element']['#field_type'];
      break;
  }
}

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function starterkit_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Block suggestions for custom block bundles.
  if (isset($variables['elements']['content']['#block_content'])) {
    array_splice($suggestions, 1, 0, 'block__bundle__' . $variables['elements']['content']['#block_content']->bundle());
  }
}

/**
 * Implements template_theme_suggestions_HOOK_alter().
 */
function starterkit_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'form__' . $variables['element']['#form_id'];
}

//*********************************************
// 3. Utility functions
//*********************************************

/**
 * Get a renderable array from a block ID
 *
 * @param $block_id
 * @param null $weight
 *  Optional weight parameter, useful if you are dumping this into a region and need to negotiate its position
 * @return array
 */
function starterkit_block_to_renderable_array($block_id, $weight = null) {
  $block = Block::load($block_id);
  if (is_null($block)) return [];
  $block_content = \Drupal::entityTypeManager()
    ->getViewBuilder('block')
    ->view($block);

  // set weight
  if (isset($weight)) {
    $block_content['#weight'] = $weight;
  }

  if ($block->access('view')) {
    return $block_content;
  }
}


/**
 * Utility function to create a renderable array from a view
 *
 * @param $view_id
 *  The view machine name id
 * @param $view_display
 *  The display machine name id
 * @param null $view_title
 *  Optionally add the view title
 *
 * @return mixed
 *  The view as a renderable array
 */
function starterkit_view_to_renderable_array($view_id, $view_display, $view_title = null) {
  // set title
  $view = Views::getView($view_id);
  $view->setDisplay($view_display);

  if (isset($view_title)) {
    $view_content['title'] = [
      '#type' => 'html_tag',
      '#tag' => 'h2',
      '#value' => $view->getTitle(),
      '#attributes' => [
        'class' => 'view-title',
      ],
    ];
  }
  $view_content['content'] = views_embed_view($view_id, $view_display);

  return $view_content;
}
